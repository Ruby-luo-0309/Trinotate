#!/usr/bin/env perl

use strict;
use warnings;
use FindBin;
use lib ("$FindBin::Bin/PerlLib");
use Pipeliner;
use Carp;

my $usage = <<_EOUSAGE_;


   usage: $0 <sqlite.db> <command> <input> [...]


     <commands>: 

         * Initial creation of the Trinotate sqlite database and downloading of the required data sets
              
             Trinotate <sqlite.db> create /path/to/TRINOTATE_DATA_DIR

                 The sqlite.db file is created as named and search databases are downloaded into /path/to/TRINOTATE_DATA_DIR
                 (Note, if EggnogMapper is installed and env var EGGNOG_DATA_DIR is NOT set, will additionally download those data too into TRINOTATE_DATA_DIR !) 

         * Initial import of transcriptome and protein data:

             Trinotate <sqlite.db> init --gene_trans_map <file> --transcript_fasta <file> --transdecoder_pep <file>

         * Transdecoder protein search results:

             Trinotate <sqlite.db> LOAD_swissprot_blastp <file>
             Trinotate <sqlite.db> LOAD_pfam <file>
             Trinotate <sqlite.db> LOAD_deeptmhmm <file>
             Trinotate <sqlite.db> LOAD_signalp <file>
             Trinotate <sqlite.db> LOAD_EggnogMapper <file>

          * Trinity transcript search results:

             Trinotate <sqlite.db> LOAD_swissprot_blastx <file>
             Trinotate <sqlite.db> LOAD_infernal <file>
             

          * Load custom blast results using any searchable database

             Trinotate <sqlite.db> LOAD_custom_blast --outfmt6 <file> --prog <blastp|blastx> --dbtype <database_name>


          * report generation:

             Trinotate <sqlite.db> report [ -E (default: 1e-5) ] [--pfam_cutoff DNC|DGC|DTC|SNC|SGC|STC (default: DNC=domain noise cutoff)]


_EOUSAGE_

;

unless (scalar @ARGV >= 2) { die $usage; }

my $sqlite_db = shift @ARGV;
my $command = shift @ARGV;

unless ($command eq "create" || -s $sqlite_db) {
    die "Error, cannot locate $sqlite_db database file. Be sure it's in your current directory.";
}

if ($command ne 'report' && ! @ARGV) {
    die $usage . "\n\nMissing parameter.\n\n";
}

my %commands = map { + $_ => 1 } qw(LOAD_swissprot_blastp LOAD_swissprot_blastx 
                                    LOAD_pfam LOAD_deeptmhmm LOAD_signalp LOAD_infernal
                                    LOAD_EggnogMapper
                                    LOAD_custom_blast
                                    report init create);

unless (exists $commands{$command}) {
    die "$usage\nError, do not recognize command: $command\n";
}

my $util_dir = "$FindBin::RealBin/util";
my $loaders_dir = "$util_dir/trinotateSeqLoader";
my $admin_dir = "$util_dir/admin";

unless (@ARGV) {
    @ARGV = (""); # to avoid error messages inusing $ARGV[0] below
}

my %command_to_params = ( 
    # protein-based
    'LOAD_swissprot_blastp' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastp --dbtype Swissprot",
    'LOAD_trembl_blastp' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastp --dbtype TrEMBL",
    'LOAD_pfam'  => "$loaders_dir/Trinotate_PFAM_loader.pl --sqlite $sqlite_db --pfam $ARGV[0]",
    'LOAD_deeptmhmm' => "$loaders_dir/Trinotate_DeepTmHMM_loader.pl --sqlite $sqlite_db --tmhmm $ARGV[0]",
    'LOAD_signalp' => "$loaders_dir/Trinotate_SIGNALP_loader.pl --sqlite $sqlite_db --signalp $ARGV[0]",
    'LOAD_EggnogMapper' => "$loaders_dir/Trinotate_EggnogMapper_loader.pl --sqlite $sqlite_db --emapper $ARGV[0]",
    
    
    # transcript-based
    'LOAD_swissprot_blastx' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastx --dbtype Swissprot",
    'LOAD_trembl_blastx' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db --outfmt6 $ARGV[0] --prog blastx --dbtype TrEMBL",
    'LOAD_infernal' => "$loaders_dir/Trinotate_Infernal_loader.pl --sqlite $sqlite_db --infernal $ARGV[0]",
    
    # custom blast searches
    'LOAD_custom_blast' => "$loaders_dir/Trinotate_BLAST_loader.pl --sqlite $sqlite_db @ARGV",
    
    
    );



if (my $cmd = $command_to_params{$command}) {
    &process_cmd($cmd);
}
elsif ($command eq "create") {
    # set up Trinotate database and data dir
    my $path_to_trinotate_db = shift @ARGV;
    unless($path_to_trinotate_db) {
        die "Error, the Trinotate create parameter requires a path to a destination data directory that will be created/populated";
    }
    &run_Trinotate_create($sqlite_db, $path_to_trinotate_db);
}
elsif ($command eq "report") {
    ## generate Trinotate report.
    my $cmd = "$FindBin::RealBin/util/Trinotate_report_writer.pl --sqlite $sqlite_db @ARGV";
    &process_cmd($cmd);
    
}
elsif ($command eq "init") {
    # populate sequence and gene/trans/orf data
    my $cmd = "$FindBin::RealBin/util/trinotateSeqLoader/TrinotateSeqLoader.pl --sqlite $sqlite_db @ARGV --bulk_load";
    &process_cmd($cmd);
}
else {
    die "Error, do not recognize command: $command ";
}



exit(0);

####
sub process_cmd {
    my ($cmd) = @_;

    print STDERR "CMD: $cmd\n";
    my $ret = system($cmd);
    if ($ret) {
        die "Error, cmd: $cmd died with ret $ret";
    }

    return;
}


####
sub run_Trinotate_create {
    my ($sqlite_db, $path_to_trinotate_db) = @_;

    unless ($path_to_trinotate_db) {
        confess("Error, require path_to_trinotate_db_param");
    }
    
    if (! -d $path_to_trinotate_db) {
        &process_cmd("mkdir -p $path_to_trinotate_db");
    }
    
    my $trin_db_build_checkpoint_dir = "$path_to_trinotate_db/__chckpts";
    if (! -d $trin_db_build_checkpoint_dir) {
        mkdir($trin_db_build_checkpoint_dir) or die "Error, cannot mkdir $trin_db_build_checkpoint_dir";
    }
    
    my $pipeliner = new Pipeliner(-verbose => 2, -checkpoint_dir => $trin_db_build_checkpoint_dir);
        
    my $cmd = "$admin_dir/Build_Trinotate_Boilerplate_SQLite_db.pl TrinotateBoilerplate";
    $pipeliner->add_commands(new Command($cmd, "build_boilerplate.ok"));


    # copy boilerplate sqlite to data dir:
    $cmd = "cp TrinotateBoilerplate.sqlite $path_to_trinotate_db/";
    $pipeliner->add_commands(new Command($cmd, "copy_boilerplate_to_datadir.ok"));

    $cmd = "mv TrinotateBoilerplate.sqlite $sqlite_db";
    $pipeliner->add_commands(new Command($cmd, "relocate_trinotate_boilerplate_sqlite_to_targetname.ok"));
    
    $cmd = "makeblastdb -in uniprot_sprot.pep -dbtype prot";
    $pipeliner->add_commands(new Command($cmd, "make_sprot_blast_db.ok"));
            
    # diamond is optional
    if (`which diamond` =~ /\w/) {
        $cmd = "diamond makedb --in uniprot_sprot.pep -d uniprot_sprot";
        $pipeliner->add_commands(new Command($cmd, "make_diamond_sprot_db.ok"));
    }
    
    $cmd = "mv uniprot_sprot* $path_to_trinotate_db/";
    $pipeliner->add_commands(new Command($cmd, "relocate_sprot_db.ok"));
    
    $cmd = "gunzip Pfam-A.hmm.gz";
    $pipeliner->add_commands(new Command($cmd, "gunzip_pfam.ok"));

    $cmd = "hmmpress Pfam-A.hmm";
    $pipeliner->add_commands(new Command($cmd, "hmmpress_pfam_db.ok"));

    
    $cmd = "mv Pfam-A.hmm* $path_to_trinotate_db/";
    $pipeliner->add_commands(new Command($cmd, "relocate_pfam_db.ok"));


    

    ## add EggnogMapper
    if (`which emapper.py` =~ /\w/) {
        ## integrate EggnogMapper database
        

    }

    ## add Infernal
    $cmd = "wget ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/Rfam.cm.gz";
    $pipeliner->add_commands(new Command($cmd, "wget_Rfam.cm.gz"));

    $cmd = "gunzip Rfam.cm.gz";
    $pipeliner->add_commands(new Command($cmd, "gunzip_Rfam.cm.gz"));
    
    $cmd = "wget ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/Rfam.clanin";
    $pipeliner->add_commands(new Command($cmd, "wget_clanin.cm.gz"));
    
    $cmd = "cmpress Rfam.cm";
    $pipeliner->add_commands(new Command($cmd, "cmpress_Rfam_cm.ok"));
    
    $cmd = "mv Rfam.* $path_to_trinotate_db/";
    $pipeliner->add_commands(new Command($cmd, "relocate_Rfam_db.ok"));



    $pipeliner->run();
    
    
}
